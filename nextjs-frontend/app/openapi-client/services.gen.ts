// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, urlSearchParamsBodySerializer } from '@hey-api/client-fetch';
import type { AuthJwtLoginAuthJwtLoginPostData, AuthJwtLoginAuthJwtLoginPostError, AuthJwtLoginAuthJwtLoginPostResponse, AuthJwtLogoutAuthJwtLogoutPostError, AuthJwtLogoutAuthJwtLogoutPostResponse, RegisterRegisterAuthRegisterPostData, RegisterRegisterAuthRegisterPostError, RegisterRegisterAuthRegisterPostResponse, ResetForgotPasswordAuthForgotPasswordPostData, ResetForgotPasswordAuthForgotPasswordPostError, ResetForgotPasswordAuthForgotPasswordPostResponse, ResetResetPasswordAuthResetPasswordPostData, ResetResetPasswordAuthResetPasswordPostError, ResetResetPasswordAuthResetPasswordPostResponse, VerifyRequestTokenAuthRequestVerifyTokenPostData, VerifyRequestTokenAuthRequestVerifyTokenPostError, VerifyRequestTokenAuthRequestVerifyTokenPostResponse, VerifyVerifyAuthVerifyPostData, VerifyVerifyAuthVerifyPostError, VerifyVerifyAuthVerifyPostResponse, UsersCurrentUserUsersMeGetError, UsersCurrentUserUsersMeGetResponse, UsersPatchCurrentUserUsersMePatchData, UsersPatchCurrentUserUsersMePatchError, UsersPatchCurrentUserUsersMePatchResponse, UsersUserUsersIdGetData, UsersUserUsersIdGetError, UsersUserUsersIdGetResponse, UsersPatchUserUsersIdPatchData, UsersPatchUserUsersIdPatchError, UsersPatchUserUsersIdPatchResponse, UsersDeleteUserUsersIdDeleteData, UsersDeleteUserUsersIdDeleteError, UsersDeleteUserUsersIdDeleteResponse, AuthenticatedRouteAuthenticatedRouteGetError, AuthenticatedRouteAuthenticatedRouteGetResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Auth:Jwt.Login
 */
export const authJwtLoginAuthJwtLoginPost = <ThrowOnError extends boolean = false>(options: Options<AuthJwtLoginAuthJwtLoginPostData, ThrowOnError>) => { return (options?.client ?? client).post<AuthJwtLoginAuthJwtLoginPostResponse, AuthJwtLoginAuthJwtLoginPostError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        ...options?.headers
    },
    url: '/auth/jwt/login'
}); };

/**
 * Auth:Jwt.Logout
 */
export const authJwtLogoutAuthJwtLogoutPost = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).post<AuthJwtLogoutAuthJwtLogoutPostResponse, AuthJwtLogoutAuthJwtLogoutPostError, ThrowOnError>({
    ...options,
    url: '/auth/jwt/logout'
}); };

/**
 * Register:Register
 */
export const registerRegisterAuthRegisterPost = <ThrowOnError extends boolean = false>(options: Options<RegisterRegisterAuthRegisterPostData, ThrowOnError>) => { return (options?.client ?? client).post<RegisterRegisterAuthRegisterPostResponse, RegisterRegisterAuthRegisterPostError, ThrowOnError>({
    ...options,
    url: '/auth/register'
}); };

/**
 * Reset:Forgot Password
 */
export const resetForgotPasswordAuthForgotPasswordPost = <ThrowOnError extends boolean = false>(options: Options<ResetForgotPasswordAuthForgotPasswordPostData, ThrowOnError>) => { return (options?.client ?? client).post<ResetForgotPasswordAuthForgotPasswordPostResponse, ResetForgotPasswordAuthForgotPasswordPostError, ThrowOnError>({
    ...options,
    url: '/auth/forgot-password'
}); };

/**
 * Reset:Reset Password
 */
export const resetResetPasswordAuthResetPasswordPost = <ThrowOnError extends boolean = false>(options: Options<ResetResetPasswordAuthResetPasswordPostData, ThrowOnError>) => { return (options?.client ?? client).post<ResetResetPasswordAuthResetPasswordPostResponse, ResetResetPasswordAuthResetPasswordPostError, ThrowOnError>({
    ...options,
    url: '/auth/reset-password'
}); };

/**
 * Verify:Request-Token
 */
export const verifyRequestTokenAuthRequestVerifyTokenPost = <ThrowOnError extends boolean = false>(options: Options<VerifyRequestTokenAuthRequestVerifyTokenPostData, ThrowOnError>) => { return (options?.client ?? client).post<VerifyRequestTokenAuthRequestVerifyTokenPostResponse, VerifyRequestTokenAuthRequestVerifyTokenPostError, ThrowOnError>({
    ...options,
    url: '/auth/request-verify-token'
}); };

/**
 * Verify:Verify
 */
export const verifyVerifyAuthVerifyPost = <ThrowOnError extends boolean = false>(options: Options<VerifyVerifyAuthVerifyPostData, ThrowOnError>) => { return (options?.client ?? client).post<VerifyVerifyAuthVerifyPostResponse, VerifyVerifyAuthVerifyPostError, ThrowOnError>({
    ...options,
    url: '/auth/verify'
}); };

/**
 * Users:Current User
 */
export const usersCurrentUserUsersMeGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<UsersCurrentUserUsersMeGetResponse, UsersCurrentUserUsersMeGetError, ThrowOnError>({
    ...options,
    url: '/users/me'
}); };

/**
 * Users:Patch Current User
 */
export const usersPatchCurrentUserUsersMePatch = <ThrowOnError extends boolean = false>(options: Options<UsersPatchCurrentUserUsersMePatchData, ThrowOnError>) => { return (options?.client ?? client).patch<UsersPatchCurrentUserUsersMePatchResponse, UsersPatchCurrentUserUsersMePatchError, ThrowOnError>({
    ...options,
    url: '/users/me'
}); };

/**
 * Users:User
 */
export const usersUserUsersIdGet = <ThrowOnError extends boolean = false>(options: Options<UsersUserUsersIdGetData, ThrowOnError>) => { return (options?.client ?? client).get<UsersUserUsersIdGetResponse, UsersUserUsersIdGetError, ThrowOnError>({
    ...options,
    url: '/users/{id}'
}); };

/**
 * Users:Patch User
 */
export const usersPatchUserUsersIdPatch = <ThrowOnError extends boolean = false>(options: Options<UsersPatchUserUsersIdPatchData, ThrowOnError>) => { return (options?.client ?? client).patch<UsersPatchUserUsersIdPatchResponse, UsersPatchUserUsersIdPatchError, ThrowOnError>({
    ...options,
    url: '/users/{id}'
}); };

/**
 * Users:Delete User
 */
export const usersDeleteUserUsersIdDelete = <ThrowOnError extends boolean = false>(options: Options<UsersDeleteUserUsersIdDeleteData, ThrowOnError>) => { return (options?.client ?? client).delete<UsersDeleteUserUsersIdDeleteResponse, UsersDeleteUserUsersIdDeleteError, ThrowOnError>({
    ...options,
    url: '/users/{id}'
}); };

/**
 * Authenticated Route
 */
export const authenticatedRouteAuthenticatedRouteGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<AuthenticatedRouteAuthenticatedRouteGetResponse, AuthenticatedRouteAuthenticatedRouteGetError, ThrowOnError>({
    ...options,
    url: '/authenticated-route'
}); };